// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mlsat.Services;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mlsat.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240414183233_6")]
    partial class _6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mlsat.Models.Entities.Columns.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.ToTable("Column");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.DataSources.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseDataSourceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDstLoaded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLoadAp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLoadDst")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLoadKp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLoadWolf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNaDropped")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNormalize")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TimeColumn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseDataSourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.BaseModels.BaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Models");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.ModelColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseModelId");

                    b.ToTable("ModelColumn");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.SpaceWeatherColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseModelId");

                    b.ToTable("SpaceWeatherColumn");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.SpaceWeather.Ap", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Date");

                    b.ToTable("Aps");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.SpaceWeather.Dst", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Date");

                    b.ToTable("Dsts");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.SpaceWeather.Kp", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Date");

                    b.ToTable("Kps");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.SpaceWeather.Wolf", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Date");

                    b.ToTable("Wolfs");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.Gans.GanAutoencoder", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.HasDiscriminator().HasValue("GanAutoencoder");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.IsolationForests.IsolationForest", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.Property<decimal>("Contamination")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("IsolationForest");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.Knns.Knn", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NNeighbors")
                        .HasColumnType("integer");

                    b.Property<int>("Percentile")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Knn");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.Lofs.Lof", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.Property<decimal>("Contamination")
                        .HasColumnType("numeric");

                    b.Property<int>("NNeighbors")
                        .HasColumnType("integer");

                    b.ToTable("Models", t =>
                        {
                            t.Property("Contamination")
                                .HasColumnName("Lof_Contamination");

                            t.Property("NNeighbors")
                                .HasColumnName("Lof_NNeighbors");
                        });

                    b.HasDiscriminator().HasValue("Lof");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.SiameseAutoencoders.SiameseAutoencoder", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.HasDiscriminator().HasValue("SiameseAutoencoder");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.SimpleAutoencoders.SimpleAutoencoder", b =>
                {
                    b.HasBaseType("Mlsat.Models.Entities.Models.BaseModels.BaseModel");

                    b.HasDiscriminator().HasValue("SimpleAutoencoder");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Columns.Column", b =>
                {
                    b.HasOne("Mlsat.Models.Entities.DataSources.DataSource", null)
                        .WithMany("Columns")
                        .HasForeignKey("DataSourceId");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.DataSources.DataSource", b =>
                {
                    b.HasOne("Mlsat.Models.Entities.DataSources.DataSource", "BaseDataSource")
                        .WithMany()
                        .HasForeignKey("BaseDataSourceId");

                    b.HasOne("Mlsat.Models.Entities.Projects.Project", "Project")
                        .WithMany("DataSources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDataSource");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.BaseModels.BaseModel", b =>
                {
                    b.HasOne("Mlsat.Models.Entities.DataSources.DataSource", "DataSource")
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mlsat.Models.Entities.Projects.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.ModelColumn", b =>
                {
                    b.HasOne("Mlsat.Models.Entities.Models.BaseModels.BaseModel", null)
                        .WithMany("ModelColumns")
                        .HasForeignKey("BaseModelId");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.SpaceWeatherColumn", b =>
                {
                    b.HasOne("Mlsat.Models.Entities.Models.BaseModels.BaseModel", null)
                        .WithMany("SpaceWeatherColumns")
                        .HasForeignKey("BaseModelId");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.DataSources.DataSource", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Models.BaseModels.BaseModel", b =>
                {
                    b.Navigation("ModelColumns");

                    b.Navigation("SpaceWeatherColumns");
                });

            modelBuilder.Entity("Mlsat.Models.Entities.Projects.Project", b =>
                {
                    b.Navigation("DataSources");

                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
